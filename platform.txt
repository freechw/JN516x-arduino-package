name=ContikiOS Platform
version=1.6.9

compiler.warning_flags=-w
compiler.warning_flags.none=-w
compiler.warning_flags.default=
compiler.warning_flags.more=-Wall
compiler.warning_flags.all=-Wall -Wextra

compiler.c.flags=
compiler.S.flags=
compiler.cpp.flags=
compiler.ar.flags=rcs
compiler.ldflags=

# This can be overriden in boards.txt
build.extra_flags=

# These can be overridden in platform.local.txt
compiler.c.extra_flags=
compiler.c.elf.extra_flags=
compiler.S.extra_flags=
compiler.cpp.extra_flags=
compiler.ar.extra_flags=

# Makefile generate patterns
# --------------------

build.unix.cmds.path={runtime.tools.msys2-contiki-build.path}
build.usr.bin.path={build.unix.cmds.path}/usr/bin
build.usr.bin.path.macosx=/usr/local/bin
build.make.command=make
build.make.command.windows={build.usr.bin.path}/make
build.make.command.macosx=gmake
build.make.vars=
build.make.goals=all
build.intiki.path={runtime.tools.intiki.path}
build.intiki.verbose=-1

intiki.cmd={build.intiki.path}/intiki
intiki.cmd-v={intiki.cmd} {compiler.warning_flags} -verbose {build.intiki.verbose}
make.paths=-build.usr.bin.path "{build.usr.bin.path}" -build.compiler.path "{build.compiler.path}" -build.system.path "{build.system.path}" -build.variant.path "{build.variant.path}" -build.core.path "{build.core.path}" -build.path "{build.path}" -build.variant {build.variant} -runtime.platform.path {runtime.platform.path} -platform.version {version} -make.command {build.make.command} -template {build.options.makefile_template}
make.args=TARGET={build.variant} {build.make.vars} {build.config_vars}

arduino.defines=-DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch}

## Compile c files
recipe.c.o.pattern={intiki.cmd-v} -recipe c.o   {make.paths} -source "{source_file}" -target "{object_file}" -- {compiler.c.flags} {compiler.c.extra_flags} {build.extra_flags} {arduino.defines} {includes}

## Compile c++ files
recipe.cpp.o.pattern={intiki.cmd-v} -recipe cpp.o {make.paths} -source "{source_file}" -target "{object_file}" -- {compiler.cpp.flags} {compiler.cpp.extra_flags} {build.extra_flags} {arduino.defines} {includes}

## Compile S files
recipe.S.o.pattern={intiki.cmd-v} -recipe S.o {make.paths} -source "{source_file}" -target "{object_file}" -- {compiler.S.flags} {compiler.S.extra_flags} {build.extra_flags} {ardino.defines} {includes}

## Create archives
recipe.ar.pattern={intiki.cmd-v} -recipe ar    {make.paths} -source "{object_file}" -target "{archive_file_path}" -- {compiler.ar.flags} {compiler.ar.extra_flags}

## Combine gc-sections, archives, and objects
recipe.c.combine.pattern={intiki.cmd-v} -recipe ld    {make.paths} -target "{build.path}/{build.project_name}.elf" -project_name {build.project_name} -archive_file {archive_file}

## Save hex
recipe.output.tmp_file={build.project_name}.bin
recipe.output.save_file={build.project_name}.{build.variant}.bin

## Compute size
recipe.size.pattern={intiki.cmd-v} -recipe make {make.paths} -C {build.path} {make.args} size
recipe.size.regex=\.text\s+([0-9]+).*

preproc.common.flags={compiler.cpp.flags} -DF_CPU={build.f_cpu} {arduino.defines} {compiler.cpp.extra_flags} {build.extra_flags} -includes {includes} -make-args -C {build.path} {make.args}


## Preprocessor
preproc.includes.flags=-w -x c++ -M -MG -MP
recipe.preproc.includes={intiki.cmd-v} -recipe preproc.includes {make.paths} -source "{source_file}" -target /dev/null -- {preproc.includes.flags} {preproc.common.flags}
preproc.macros.flags=-w -x c++ -E -CC
recipe.preproc.macros={intiki.cmd-v} -recipe preproc.macros {make.paths} -source "{source_file}" -target "{preprocessed_file_path}" -- {preproc.macros.flags} {preproc.common.flags} preproc.macros

recipe.hooks.sketch.prebuild.1.pattern={intiki.cmd-v} -recipe stage -stage sketch {make.paths}
recipe.hooks.libraries.prebuild.1.pattern={intiki.cmd-v} -recipe stage -stage libraries {make.paths}
recipe.hooks.core.prebuild.1.pattern={intiki.cmd-v} -recipe stage -stage core {make.paths}
recipe.hooks.linking.prelink.1.pattern={intiki.cmd-v} -recipe stage -stage link {make.paths}
recipe.hooks.objcopy.preobjcopy.1.pattern={intiki.cmd-v} -recipe genprjc -build.path {build.path} -project_name {build.project_name}
recipe.hooks.objcopy.preobjcopy.2.pattern={intiki.cmd-v} -recipe makefile {make.paths}
recipe.hooks.objcopy.preobjcopy.3.pattern={intiki.cmd-v} -recipe make {make.paths} -- -C {build.path} {make.args} {build.make.goals}

tools.intiki.path={runtime.tools.intiki.path}
tools.intiki.cmd.path={path}/intiki
tools.intiki.cmd.path.windows={path}\intiki.exe
tools.intiki.upload.pattern="{cmd.path}" -recipe make -build.path "{build.path}" -build.variant {build.variant} -build.usr.bin.path "{build.usr.bin.path}" -build.compiler.path "{build.compiler.path}" -build.uploader.path "{build.uploader.path}" -serial.port {serial.port} TARGET={build.variant} {build.make.vars} {build.config_vars} {build.project_name}.upload
tools.intiki.build.unix.cmds.path={runtime.tools.msys2-contiki-build.path}
tools.intiki.build.usr.bin.path={build.unix.cmds.path}/usr/bin
tools.intiki.build.usr.bin.path.macosx=/usr/local/bin
tools.intiki.build.intiki.verbose=-1


tools.intiki.upload.params.verbose=
tools.intiki.upload.params.quiet=
